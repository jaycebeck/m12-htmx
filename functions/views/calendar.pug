doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
table.table-fixed.border-separate.border-spacing-2(class='text-gray text-xl')
  td
    button(onclick='prevMonth()' class="rounded hover:bg-slate-500 bg-slate-100") <
  td 
    div#monthYear(class='text-2xl font-bold p-4')
  td
    button(onclick='nextMonth()' class="rounded hover:bg-slate-500 bg-slate-100") >
table#calendar(cellspacing='21' cellpadding='21' style='text-align: center;' class='text-white bg-slate-800')
  thead
    tr.border-b(class='bg-slate-500 text-white')
      th Sun
      th Mon
      th Tue
      th Wed
      th Thu
      th Fri
      th Sat
  tbody#calendarBody
script.
  let currentMonth;
  let currentYear;
  let highlightedDates = {};
  async function fetchHighlightedDates(month, year) {
    currentMonth = month;
    currentYear = year;
    try {
      const response = await fetch('http://localhost:5001/m12calendar-htmx-79475/us-central1/getTaskDates');
      
      if (!response.ok) {
        throw new Error('Failed to fetch highlighted dates');
      }
      const data = await response.json();
      highlightedDates = data;
      generateCalendar(currentMonth, currentYear); // Call generateCalendar after highlightedDates have been fetched
    } catch (error) {
      console.error('Error fetching highlighted dates:', error);
    }
  }
  function generateCalendar(month, year) {
    currentMonth = month;
    currentYear = year;
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDay = firstDay.getDay();
    const monthYearString = new Date(year, month).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
    document.getElementById('monthYear').innerText = monthYearString;
    const calendarBody = document.getElementById('calendarBody');
    calendarBody.innerHTML = '';
    let day = 1;
    for (let i = 0; i < 6; i++) {
      const row = document.createElement('tr');
      for (let j = 0; j < 7; j++) {
        if (i === 0 && j < startingDay) {
          const cell = document.createElement('td');
          row.appendChild(cell);
        } else if (day > daysInMonth) {
          break;
        } else {
          const cell = document.createElement('td');
          const dateString = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
          cell.innerText = day;
          if (highlightedDates.includes(dateString)) {
            cell.style.backgroundColor = 'SlateBlue';
          }
          if (day === new Date().getDate() && year === new Date().getFullYear() && month === new Date().getMonth()) {
            cell.style.backgroundColor = 'LightSkyBlue';
          }
          row.appendChild(cell);
          day++;
        }
      }
      calendarBody.appendChild(row);
    }
  }
  function prevMonth() {
    currentMonth--;
    if (currentMonth < 0) {
      currentMonth = 11;
      currentYear--;
    }
    generateCalendar(currentMonth, currentYear);
  }
  function nextMonth() {
    currentMonth++;
    if (currentMonth > 11) {
      currentMonth = 0;
      currentYear++;
    }
    generateCalendar(currentMonth, currentYear);
  }

  const today = new Date();
  fetchHighlightedDates(today.getMonth(), today.getFullYear());